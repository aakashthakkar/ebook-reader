# Alternative Dockerfile with explicit multi-architecture support
# This version handles architecture detection more explicitly

# Use buildkit for advanced features
# syntax=docker/dockerfile:1

# Define build arguments for architecture
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETOS
ARG TARGETARCH

# Choose base image based on architecture
FROM python:3.11-slim

# Print build information
RUN echo "Building on: $BUILDPLATFORM, targeting: $TARGETPLATFORM" && \
    echo "Target OS: $TARGETOS, Target Arch: $TARGETARCH" && \
    echo "Actual architecture: $(uname -m)" && \
    python3 --version

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PDF_STORAGE_PATH=/app/pdf_storage
ENV MUSIC_STORAGE_PATH=/app/music_storage

# Install architecture-specific packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    git \
    curl \
    wget \
    ca-certificates \
    libffi-dev \
    libssl-dev \
    pkg-config \
    libsndfile1 \
    libasound2-dev \
    && \
    # Install espeak based on architecture
    if [ "$TARGETARCH" = "arm64" ]; then \
        apt-get install -y --no-install-recommends espeak espeak-data libespeak1 libespeak-dev; \
    else \
        apt-get install -y --no-install-recommends espeak espeak-data libespeak1 libespeak-dev; \
    fi && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Clone repository
RUN git clone https://github.com/aakashthakkar/ebook-reader.git . && \
    rm -rf .git && \
    echo "Repository cloned successfully" && \
    ls -la

# Install Python dependencies with architecture-specific handling
RUN python -m pip install --upgrade pip setuptools wheel && \
    # For ARM64, we might need specific handling for some packages
    if [ "$TARGETARCH" = "arm64" ]; then \
        echo "Installing for ARM64..."; \
        pip install --no-cache-dir -r requirements.txt --prefer-binary; \
    else \
        echo "Installing for AMD64..."; \
        pip install --no-cache-dir -r requirements.txt; \
    fi

# Create storage directories and non-root user
RUN useradd -m -u 1000 appuser && \
    mkdir -p /app/pdf_storage /app/music_storage && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app && \
    chmod 755 /app/pdf_storage /app/music_storage

USER appuser

# Expose port
EXPOSE 8000

# Create volumes for storage
VOLUME ["/app/pdf_storage", "/app/music_storage"]

# Labels
LABEL maintainer="aakashthakkar" \
      description="PDF to Audio eBook Reader (Multi-arch)" \
      version="1.0" \
      architecture="$TARGETARCH"

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

# Start application
CMD ["python", "app.py"] 